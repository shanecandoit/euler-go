package src

// Euler2 sum of even fibs < 4mil
func Euler2(top int) int64 {
	// Each new term in the Fibonacci sequence is
	// generated by adding the previous two terms.
	// By starting with 1 and 2, the first 10 terms will be:
	// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	// By considering the terms in the Fibonacci
	// sequence whose values do not exceed four million,
	// find the sum of the even-valued terms.
	sum := int64(0)

	top64 := int64(top)
	ns := fibs(1, 2, top64)
	// TODO dont really need to fill memory like this

	for _, n := range ns {
		if n%2 == 0 {
			sum += n
		}
	}

	// println("Euler2 ", top, "=", sum)
	// 1 2 3 5 8 13 21 34 55 89 Euler2  10 = 44
	// Euler2  4000000 = 4613732
	return sum
}

// the list of fibs < top
func fibs(a, b, top int64) []int64 {
	fibs := []int64{}
	if a < top {
		fibs = append(fibs, a)
	}
	if b < top {
		fibs = append(fibs, b)
	}
	c := a + b
	for c < top {
		fibs = append(fibs, c)
		a = b
		b = c
		c = a + b
	}
	return fibs
}
